#!/usr/bin/env python

import json
import os
import requests

from bs4 import BeautifulSoup

def scrape_country_populations():
    page = requests.get("https://en.wikipedia.org/wiki/List_of_countries_by_population_(United_Nations)")
    soup = BeautifulSoup(page.content, 'html.parser')
    rows = soup.find_all('tr')
    data = {}
    for r in rows:
        tds = list(r.find_all('td'))
        if len(tds) != 6:
            continue
        name = tds[0].get_text().strip()
        population = tds[4].get_text()
        # Remove references.
        if "[" in name:
            name = name.split("[")[0]
        data[name] = int(population.replace(",", ""))
    return data

def get_current_country_data():
    data = []
    with open("countries.data") as f:
        countries = [l.strip() for l in f.readlines()]
        for c in countries:
            parts = c.split(":")
            data.append(parts)
        f.close()
    return data

def find_code_for_country_name(country_info, name):
    for datum in country_info:
        current_code = datum[1]
        current_name = datum[2]
        if current_name.lower() == name.lower():
            return current_code
        # If we can't get an exact match, try to match a prefix.
        if current_name.lower().startswith(name.lower()) or \
        name.lower().startswith(current_name.lower()):
            return current_code
    print("Could not find " + name)
    return None

def get_centroids():
    with open("country_boundaries.json", "r") as f:
        boundaries = json.load(f)
        return {o['code'] : o['centroid'] for o in boundaries}


def write_updated_data(pop, current, centroids):
    os.remove("countries.data")

    code_to_population = {}
    for name in pop:
        code = find_code_for_country_name(current, name)
        if not code:
            continue
        code_to_population[code] = pop[name]

    output = []
    for c in current:
        code = c[1]
        if code not in code_to_population:
            output.append(":".join(c))
            continue
        population = code_to_population[code]
        if len(c) == 4:
            # No population here yet
            c.insert(3, str(population))
        elif len(c) == 5:
            # We already have a population, let's overwrite that
            c[3] = str(population)
        centroid = centroids.get(code,[])
        if centroid is None or len(centroid) != 2:
            continue
        centroid_rep = json.dumps(centroid)
        if len(c) == 5:
            c.append(centroid_rep)
        else:
            c[5] = centroid_rep
        output.append(":".join(c))

    with open("countries.data", "w") as f:
        f.write("\n".join(output))
        f.close()

if __name__ == "__main__":
    print("Downloading new data...")
    populations = scrape_country_populations()
    print("Updating local data...")
    current = get_current_country_data()
    print("Getting centroid info...")
    centroids = get_centroids()
    print("Writing out...")
    write_updated_data(populations, current, centroids)
    print("All done.")
